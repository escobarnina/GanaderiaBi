"""
Configuraci√≥n del Admin de Django para Clean Architecture.

Este m√≥dulo contiene las configuraciones del admin que son espec√≠ficas
de la implementaci√≥n de Django, siguiendo los principios de Clean Architecture.

Admins disponibles:
- MarcaGanadoBovinoAdmin: Gesti√≥n de marcas con acciones masivas
- LogoMarcaBovinaAdmin: Visualizaci√≥n de logos con indicadores de calidad
- KPIGanadoBovinoAdmin: An√°lisis de KPIs con m√©tricas de eficiencia
- HistorialEstadoMarcaAdmin: Auditor√≠a completa de cambios de estado
- DashboardDataAdmin: Dashboard con m√©tricas en tiempo real
- ReporteDataAdmin: Gesti√≥n de reportes con an√°lisis de datos

Estado: ‚úÖ 6 admins completos siguiendo Clean Architecture y SOLID
"""

from django.contrib import admin
from django.apps import apps
from .dashboard_admin import DashboardDataAdmin
from .reporte_admin import ReporteDataAdmin
from .kpi_admin import KPIGanadoBovinoAdmin
from .historial_admin import HistorialEstadoMarcaAdmin
from .marca_admin import MarcaGanadoBovinoAdmin
from .logo_admin import LogoMarcaBovinaAdmin

__all__ = [
    "DashboardDataAdmin",
    "ReporteDataAdmin",
    "KPIGanadoBovinoAdmin",
    "HistorialEstadoMarcaAdmin",
    "MarcaGanadoBovinoAdmin",
    "LogoMarcaBovinaAdmin",
]

# Informaci√≥n del m√≥dulo admin
ADMIN_VERSION = "2.0.0"
ADMIN_STATUS = "‚úÖ Completado con funcionalidades avanzadas"
TOTAL_ADMINS = 6


def get_admin_info():
    """Retorna informaci√≥n detallada del m√≥dulo admin"""
    return {
        "version": ADMIN_VERSION,
        "status": ADMIN_STATUS,
        "total_admins": TOTAL_ADMINS,
        "admins": __all__,
        "features": [
            "Acciones masivas inteligentes",
            "Visualizaci√≥n con colores din√°micos",
            "Dashboard en tiempo real",
            "Auditor√≠a completa",
            "Exportaci√≥n m√∫ltiple formato",
            "Filtros avanzados en cascada",
        ],
    }


def get_admin_statistics():
    """Obtiene estad√≠sticas de uso de los admins"""
    try:
        # Obtener modelos registrados
        analytics_app = apps.get_app_config("analytics")
        models = analytics_app.get_models()

        stats = {}
        for model in models:
            stats[model.__name__] = {
                "total_records": model.objects.count(),
                "admin_registered": model in admin.site._registry,
            }

        return stats
    except Exception as e:
        return {"error": str(e)}


# Configuraci√≥n personalizada del sitio admin
def customize_admin_site():
    """Personaliza el sitio de administraci√≥n"""
    admin.site.site_header = "üêÑ Sistema BI Ganado Bovino"
    admin.site.site_title = "BI Ganado Admin"
    admin.site.index_title = "Panel de Control - Inteligencia de Negocios"
    admin.site.site_url = "/dashboard/"
    admin.site.enable_nav_sidebar = True


# Ejecutar personalizaci√≥n
customize_admin_site()
